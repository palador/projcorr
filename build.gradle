group 'de.fgoetze'
version '1.0-SNAPSHOT'

buildscript {
    ext.kotlin_version = '1.1.2-2'

    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath 'edu.sc.seis.gradle:launch4j:2.3.0'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath 'de.undercouch:gradle-download-task:3.2.0'
    }
}

import de.undercouch.gradle.tasks.download.Download

apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'edu.sc.seis.launch4j'
apply plugin: 'application'

sourceCompatibility = 1.8

launch4j {
    mainClassName = 'de.fgoetze.projcorr.MainKt'
    outfile = 'ProjCorr.exe'
    bundledJrePath = '.\\jre'
}

repositories {
    mavenCentral()
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-jre8:$kotlin_version"
    compile 'org.openpnp:opencv:3.2.0-1'
    testCompile group: 'junit', name: 'junit', version: '4.12'
}

public String getPlatform() {
    switch (System.properties['os.name'].replaceAll(' ', '').toLowerCase()) {
        case ~/.*linux.*/: return 'linux'
        case ~/.*darwin.*/: return 'osx'
        case ~/.*osx.*/: return 'osx'
        case ~/.*win.*/: return 'windows'
        default: return platform
    }
}

public String getArch() {
    String arch = System.properties['os.arch']
    switch (getPlatform()) {
        case 'linux': switch (arch) {
            case ~/.*64.*/: return 'x64'
            default: return 'x86'
        }
        default: return 'x86'
    }
}

public String getPackedJdkFilename() {
    // for updates: https://bintray.com/jetbrains/intellij-jdk
    String platform = getPlatform()
    String arch = getArch()
    String version = "8u152b855.1"
    return "jbrex${version}_${platform}_${arch}.tar.gz"
}

task downloadJre(type: Download) {
    String filename = getPackedJdkFilename()

    project.ext.jrePackedFile = "$projectDir/jre/" + filename

    onlyIfNewer true
    overwrite false
    src "https://dl.bintray.com/jetbrains/intellij-jdk/" + filename
    dest file("$projectDir/jre/" + getPackedJdkFilename())
}

task prepareJre(type: Copy) {
    onlyIf { !file(project.ext.extractedJdk).exists() }
    if (project.ext.jrePackedFile.endsWith('.tar.gz')) {
        from tarTree(project.ext.jrePackedFile)
    } else {
        from zipTree(project.ext.jrePackedFile)
    }

    project.ext.extractedJdk = "$projectDir/jre/" + getPlatform()
    into project.ext.extractedJdk
}
prepareJre.dependsOn downloadJre

task buildWindowsExe(type: Copy) {
    from getJrePath()
    into "$projectDir/build/launch4j/jre"
}

buildWindowsExe.dependsOn prepareJre
buildWindowsExe.dependsOn createExe


public String getJrePath() {
    String extractedRoot = project.ext.extractedJdk
    String jdkFilename = getPackedJdkFilename()
//    String jdkFilenameWOExt = jdkFilename.replace('.tar.gz', '').replace('.zip', '')
    return extractedRoot + '/jre'
}

// parcl uses deprecated installApp task. Forward that call to installDist.
task installApp << {
    tasks.installDist.execute()
}
installApp.dependsOn prepareJre
